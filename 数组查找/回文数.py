# coding:utf-8

'''
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
1.暴力法: 时间复杂度: O(n), 空间复杂度: O(n)
         将数字转换成字符串，两端都设一个指针同步往中间走，不断判断字符是否相等。
         或者将字符串翻转,看看是否相等。
2.折半法: 时间复杂度: O(logn), 空间复杂度: O(1)
         首先判断是否为负数, 若是, 返回False。其次，可以不断的通过/号得到每一位的数，可以不断/10得到每一位数，
         然后再同时恢复数字, 如果原来的数与回复数字相等，则为True
         现在的问题是,我们怎么知道我们已经达到了这个数字的一​​半？
         由于我们将数字除以10,并将反转数字乘以10,当原始数字小于反转数字时，这意味着我们已经处理了一半的数字。
'''


class Solution:
    def isPalindrome(self, x):
        if x < 0:
            return False
        r_x = 0
        while x > r_x:
            remain = x % 10
            x = x/10
        return x==r_x
slou = Solution()
print(slou.isPalindrome(121))